package stepDefinitions;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;

import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.*;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.testng.Assert;

import io.cucumber.java.After;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;

public class LoginStepDefinitions {
	
	
	public String driverPath = System.getProperty("user.dir")+File.separator+"Driver"+File.separator+"chromedriver.exe";
	public String loginDetFilePath = System.getProperty("user.dir")+File.separator+"Input"+File.separator+"LoginData.xlsx";
	public WebDriver driver;
	
	@Given("User is on Login Page")
	public void user_is_on_login_page() {
		System.setProperty("webdriver.chrome.driver", driverPath);
		ChromeOptions options = new ChromeOptions();
		options.addArguments("--remote-allow-origins=*");
		driver = new ChromeDriver(options);
		driver.get("https://www.saucedemo.com/");
		driver.manage().window().maximize();
		
	}
	@When("User enters {string} and {string} from Excel")
    public void user_enters_and_from_Excel(String username, String password) throws IOException {
        // In this step, you can call readDataFromExcel to get the data from Excel
        String[][] data = readDataFromExcel(loginDetFilePath, "LoginData");
        // Retrieve the username and password based on the scenario outline data
        int index = Integer.parseInt(username.replaceAll("[^0-9]", "")) - 1;
        username = data[index][0];
        password = data[index][1];

        // Now, you can use the username and password for the login action
        WebElement usernameField = driver.findElement(By.id("username"));
        WebElement passwordField = driver.findElement(By.id("password"));
        usernameField.sendKeys(username);
        passwordField.sendKeys(password);
    }
	@When("User clicks the login button")
	public void user_clicks_login_button()
	{
        WebElement loginButton = driver.findElement(By.id("login-button"));
        loginButton.click();
	}

	@Then("user should be on the Products page and title should be {string}")
    public void user_should_be_on_the_products_page_and_title_should_be(String expectedTitle) throws InterruptedException {
        String actualTitle = driver.getTitle();
        if (actualTitle.equals(expectedTitle)) 
        {
            System.out.println("Test passed. The title is as expected: " + expectedTitle);
        } else {
            System.out.println("Test failed. Actual title: " + actualTitle);
        }
        driver.navigate().back();
        Thread.sleep(500);
    }
	
	private String[][] readDataFromExcel(String excelFilePath, String sheetName) throws IOException {
	    FileInputStream excelFile = new FileInputStream(new File(excelFilePath));
	    Workbook workbook = new XSSFWorkbook(excelFile);
	    Sheet sheet = workbook.getSheet(sheetName);
	    int rowCount = sheet.getLastRowNum() + 1;
	    int colCount = sheet.getRow(0).getLastCellNum();

	    String[][] data = new String[rowCount][colCount];
	    for (int i = 0; i < rowCount; i++) {
	        Row row = sheet.getRow(i);
	        for (int j = 0; j < colCount; j++) {
	            Cell cell = row.getCell(j);
	            data[i][j] = cell.toString();
	        }
	    }

	    workbook.close();
	    excelFile.close();
	    return data;
	}
	
	@After
	public void closeBrowser()
	{
		driver.quit();
	}
}
